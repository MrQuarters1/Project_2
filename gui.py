# Form implementation generated from reading ui file 'window1.ui'
#
# Created by: PyQt6 UI code generator 6.6.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
from typing import Type
from datetime import datetime
import pytz
from PyQt6 import QtCore, QtGui, QtWidgets, QtTest
from PyQt6.QtCore import QTimer, QTime, Qt
from logic import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow) -> None:
        """
        :param self: referenced object
        :param MainWindow: initial gui window object
        function that creates the initial gui window
        :return none:
        """
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ClockButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.open_clock())
        self.ClockButton.setGeometry(QtCore.QRect(20, 60, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.ClockButton.setFont(font)
        self.ClockButton.setObjectName("ClockButton")
        self.StopwatchButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.open_stopwatch())
        self.StopwatchButton.setGeometry(QtCore.QRect(280, 60, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.StopwatchButton.setFont(font)
        self.StopwatchButton.setObjectName("StopwatchButton")
        self.timerButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.open_timer())
        self.timerButton.setGeometry(QtCore.QRect(540, 60, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.timerButton.setFont(font)
        self.timerButton.setObjectName("pushButton")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)


    def retranslateUi(self, MainWindow) -> None:
        """
        :param self: referenced object
        :param MainWindow: initial gui window object
        function that translates the pyqt code to work properly
        :return none:
        """
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.ClockButton.setText(_translate("MainWindow", "Timezone Clock"))
        self.StopwatchButton.setText(_translate("MainWindow", "Stopwatch"))
        self.timerButton.setText(_translate("MainWindow", "Timer"))
    def open_clock(self) -> None:
        """
        :param self: referenced object
        function that calls a clock window
        :return none:
        """
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_ClockWindow()
        self.ui.setupUi(self.window)
        self.window.show()

    def open_timer(self) -> None:
        """
        :param self: referenced object
        function that calls a timer window
        :return none:
        """
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_TimerWindow()
        self.ui.setupUi(self.window)
        self.window.show()
    def open_stopwatch(self) -> None:
        """
        :param self: referenced object
        function that calls a new stopwatch window
        :return none:
        """
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_StopwatchWindow()
        self.ui.setupUi(self.window)
        self.window.show()

class Ui_TimerWindow(object):
    time = 0
    def setupUi(self, TimerWindow) -> None:
        """
        :param self: referenced object
        :param TimerWindow: the timer window object
        function that creates the timer window
        :return none:
        """
        TimerWindow.setObjectName("TimerWindow")
        TimerWindow.resize(800, 600)
        TimerWindow.setAcceptDrops(False)
        icon = QtGui.QIcon.fromTheme("j")
        TimerWindow.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(parent=TimerWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.startbtton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.start_timer())
        self.startbtton.setGeometry(QtCore.QRect(80, 380, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.startbtton.setFont(font)
        self.startbtton.setObjectName("startbtton")
        self.stopbutton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.stop_timer())
        self.stopbutton.setGeometry(QtCore.QRect(310, 380, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.stopbutton.setFont(font)
        self.stopbutton.setObjectName("stopbutton")
        self.resetbutton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.reset_timer())
        self.resetbutton.setGeometry(QtCore.QRect(540, 380, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.resetbutton.setFont(font)
        self.resetbutton.setObjectName("resetbutton")
        self.time_input = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.time_input.setGeometry(QtCore.QRect(310, 461, 200, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.time_input.setFont(font)
        self.time_input.setObjectName("time_input")
        self.info_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.info_label.setGeometry(QtCore.QRect(10, 461, 290, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.info_label.setFont(font)
        self.info_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.info_label.setObjectName("label")
        self.time_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.time_label.setGeometry(QtCore.QRect(270, 210, 260, 80))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.time_label.setFont(font)
        self.time_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.time_label.setObjectName("time_label")
        TimerWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=TimerWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        TimerWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=TimerWindow)
        self.statusbar.setObjectName("statusbar")
        TimerWindow.setStatusBar(self.statusbar)

        self.retranslateUi(TimerWindow)
        QtCore.QMetaObject.connectSlotsByName(TimerWindow)

    def retranslateUi(self, TimerWindow) -> None:
        """
        :param self: referenced object
        :param TimerWindow: the timer window object
        function that translates the pyqt code to work properly
        :return none:
        """
        _translate = QtCore.QCoreApplication.translate
        TimerWindow.setWindowTitle(_translate("TimerWindow", "TimerWindow"))
        self.startbtton.setText(_translate("TimerWindow", "Start"))
        self.stopbutton.setText(_translate("TimerWindow", "Stop"))
        self.resetbutton.setText(_translate("TimerWindow", "Reset"))
        self.info_label.setText(_translate("TimerWindow", "Enter time in seconds:"))
        self.time_label.setText(_translate("TimerWindow", "00:00:00"))

    def start_timer(self) -> TypeError | ValueError | None:
        """
        :param self: referenced object
        function that takes the time value from a line edit, uses exception handling to get a valid input.
        :return none:
        """
        self.running = True
        try:
            if self.time_input.text() == "" and self.time > 0:
                self.update_timer()
            else:
                input = valid_input(self.time_input.text())
                self.time = input
                self.update_timer()
        except ValueError:
            self.info_label.setText('Error, Enter a positive integer amount')
        except:
            self.info_label.setText('Error, Enter time amount in seconds')
    def update_timer(self) -> None:
        """
        :param self: referenced object
        function that keeps track of time value and increments down to it
        :return none:
        """
        if self.running == True:
            for tick in range(self.time, -1, -1):
                self.time -= 1
                second = tick % 60
                minute = int(tick / 60) % 60
                hour = int(tick / 3600)
                self.time_label.setText(f"{hour:02}:{minute:02}:{second:02}")
                QtTest.QTest.qWait(1000)
                if self.running == False:
                    self.time = tick
                    break
    def stop_timer(self) -> None:
        """
        :param self: referenced object
        function that pauses the timer
        :return none:
        """
        self.time_input.setText("")
        self.running = False
    def reset_timer(self) -> None:
        """
        :param self: referenced object
        function that turns the time value into 0 and clears some text
        :return none:
        """
        self.running = False
        self.time_label.setText("00:00:00")
        self.info_label.setText("Enter time in seconds:")
        self.time_input.setText("")


class Ui_ClockWindow(object):
    Running = True
    def setupUi(self, ClockWindow) -> None:
        """
        :param self: referenced object
        :param ClockWindow: the clock window object
        function that creates the clock window
        :return none:
        """
        ClockWindow.setObjectName("ClockWindow")
        ClockWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=ClockWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.TimezoneCombo = QtWidgets.QComboBox(parent=self.centralwidget)
        self.TimezoneCombo.setGeometry(QtCore.QRect(30, 220, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.TimezoneCombo.setFont(font)
        self.TimezoneCombo.setObjectName("TimezoneCombo")
        self.TimezoneCombo.addItem("")
        self.TimezoneCombo.addItem("")
        self.TimezoneCombo.addItem("")
        self.TimezoneCombo.addItem("")
        self.TimezoneCombo.addItem("")
        self.TimezoneCombo.addItem("")
        self.pushButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.timezone_start())
        self.pushButton.setGeometry(QtCore.QRect(50, 310, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.middle_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.middle_label.setGeometry(QtCore.QRect(220, 210, 320, 91))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.middle_label.setFont(font)
        self.middle_label.setAutoFillBackground(False)
        self.middle_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.middle_label.setObjectName("middle_label")
        self.top_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.top_label.setGeometry(QtCore.QRect(260, 130, 261, 101))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.top_label.setFont(font)
        self.top_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.top_label.setObjectName("label")
        self.bottom_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.bottom_label.setGeometry(QtCore.QRect(260, 290, 261, 91))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.bottom_label.setFont(font)
        self.bottom_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.bottom_label.setObjectName("bottom_label")
        ClockWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=ClockWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        ClockWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=ClockWindow)
        self.statusbar.setObjectName("statusbar")
        ClockWindow.setStatusBar(self.statusbar)

        self.retranslateUi(ClockWindow)
        QtCore.QMetaObject.connectSlotsByName(ClockWindow)
        #self.time_label.setText(f"{get_time()}")


    def retranslateUi(self, ClockWindow) -> None:
        """
        :param self: referenced object
        :param ClockWindow: the clock window object
        function that translates the pyqt code to work properly
        :return none:
        """
        _translate = QtCore.QCoreApplication.translate
        ClockWindow.setWindowTitle(_translate("ClockWindow", "ClockWindow"))
        self.TimezoneCombo.setItemText(0, _translate("ClockWindow", "Hawaii"))
        self.TimezoneCombo.setItemText(1, _translate("ClockWindow", "Alaska"))
        self.TimezoneCombo.setItemText(2, _translate("ClockWindow", "Pacific"))
        self.TimezoneCombo.setItemText(3, _translate("ClockWindow", "Mountain"))
        self.TimezoneCombo.setItemText(4, _translate("ClockWindow", "Central"))
        self.TimezoneCombo.setItemText(5, _translate("ClockWindow", "Eastern"))
        self.pushButton.setText(_translate("ClockWindow", "Enter"))
        self.middle_label.setText(_translate("ClockWindow", f"Select a timezone and press enter!"))
        self.top_label.setText(_translate("ClockWindow", ""))
        self.bottom_label.setText(_translate("ClockWindow", ""))

    def timezone_start(self):
        """
        :param self: referenced object
        function that determines the timezone selected as well as displaying the current time in that timezone
        :return none:
        """
        timezone = self.TimezoneCombo.currentText()
        if timezone == "Hawaii":
            self.top_label.setText("The time is")
            self.bottom_label.setText("In the Hawaii timezone")
            while self.Running == True:
                hawaiiTz = pytz.timezone("US/Hawaii")
                timeInHawaii = datetime.now(hawaiiTz)
                currentTimeInHawaii = timeInHawaii.strftime("%H:%M:%S")
                self.middle_label.setText(currentTimeInHawaii)
                QtTest.QTest.qWait(1000)
        elif timezone == "Alaska":
            self.bottom_label.setText("In the Alaska timezone")
            self.top_label.setText("The time is")
            while self.Running == True:
                alaskaTz = pytz.timezone("US/Alaska")
                timeInAlaska = datetime.now(alaskaTz)
                currentTimeInAlaska = timeInAlaska.strftime("%H:%M:%S")
                self.middle_label.setText(currentTimeInAlaska)
                QtTest.QTest.qWait(1000)
        elif timezone == "Pacific":
            self.bottom_label.setText("In the Pacific timezone")
            self.top_label.setText("The time is")
            while self.Running == True:
                pacificTz = pytz.timezone("US/Pacific")
                timeInPacific = datetime.now(pacificTz)
                currentTimeInPacific = timeInPacific.strftime("%H:%M:%S")
                self.middle_label.setText(currentTimeInPacific)
                QtTest.QTest.qWait(1000)
        elif timezone == "Mountain":
            self.bottom_label.setText("In the Mountain timezone")
            self.top_label.setText("The time is")
            while self.Running == True:
                mountainTz = pytz.timezone("US/Mountain")
                timeInMountain = datetime.now(mountainTz)
                currentTimeInMountain = timeInMountain.strftime("%H:%M:%S")
                self.middle_label.setText(currentTimeInMountain)
                QtTest.QTest.qWait(1000)
        elif timezone == "Central":
            self.top_label.setText("The time is")
            self.bottom_label.setText("In the Central timezone")
            while self.Running == True:
                centralTz = pytz.timezone("US/Central")
                timeInCentral = datetime.now(centralTz)
                currentTimeInCentral = timeInCentral.strftime("%H:%M:%S")
                self.middle_label.setText(currentTimeInCentral)
                QtTest.QTest.qWait(1000)
        elif timezone == "Eastern":
            self.top_label.setText("The time is")
            self.bottom_label.setText("In the Eastern timezone")
            while self.Running == True:
                easternTz = pytz.timezone("US/Eastern")
                timeInEastern = datetime.now(easternTz)
                currentTimeInEastern = timeInEastern.strftime("%H:%M:%S")
                self.middle_label.setText(currentTimeInEastern)
                QtTest.QTest.qWait(1000)
class Ui_StopwatchWindow(object):
    time = 0
    running = False
    def setupUi(self, StopwatchWindow) -> None:
        """
        :param self: referenced object
        :param StopwatchWindow: the Stopwatch window object
        function that creates the timer window
        :return none:
        """
        StopwatchWindow.setObjectName("StopwatchWindow")
        StopwatchWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=StopwatchWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stopwatch_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.stopwatch_label.setGeometry(QtCore.QRect(270, 210, 260, 80))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.stopwatch_label.setFont(font)
        self.stopwatch_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.stopwatch_label.setObjectName("stopwatch_label")
        self.startButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.start_stopwatch())
        self.startButton.setGeometry(QtCore.QRect(80, 380, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.startButton.setFont(font)
        self.startButton.setObjectName("startButton")
        self.stopButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.stop_stopwatch())
        self.stopButton.setGeometry(QtCore.QRect(310, 380, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.stopButton.setFont(font)
        self.stopButton.setObjectName("stopButton")
        self.resetButton = QtWidgets.QPushButton(parent=self.centralwidget, clicked=lambda: self.reset_stopwatch())
        self.resetButton.setGeometry(QtCore.QRect(540, 380, 200, 61))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.resetButton.setFont(font)
        self.resetButton.setObjectName("resetButton")
        StopwatchWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=StopwatchWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        StopwatchWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=StopwatchWindow)
        self.statusbar.setObjectName("statusbar")
        StopwatchWindow.setStatusBar(self.statusbar)

        self.retranslateUi(StopwatchWindow)
        QtCore.QMetaObject.connectSlotsByName(StopwatchWindow)

    def retranslateUi(self, StopwatchWindow) -> None:
        """
        :param self: referenced object
        :param StopwatchWindow: the stopwatch window object
        function that translates the pyqt code to work properly
        :return none:
        """
        _translate = QtCore.QCoreApplication.translate
        StopwatchWindow.setWindowTitle(_translate("StopwatchWindow", "Stopwatchwindow"))
        self.stopwatch_label.setText(_translate("StopwatchWindow", "00:00:00"))
        self.startButton.setText(_translate("StopwatchWindow", "Start"))
        self.stopButton.setText(_translate("StopwatchWindow", "Stop"))
        self.resetButton.setText(_translate("StopwatchWindow", "Reset"))

    def start_stopwatch(self) -> None:
        """
        :param self: referenced object
        function that starts the stopwatch time, can be used at time 0 or after time is stopped at higher value
        :return none:
        """
        self.running = True
        self.update_stopwatch()

    def update_stopwatch(self) -> None:
        """
        :param self: referenced object
        function that keeps track of time value and increments to it
        :return none:
        """
        if self.running == True:
            for tick in range(self.time, 1000, 1):
                second = tick % 60
                minute = int(tick / 60) % 60
                hour = int(tick / 3600)
                self.stopwatch_label.setText(f"{hour:02}:{minute:02}:{second:02}")
                QtTest.QTest.qWait(1000)
                if self.running == False:
                    self.time = tick
                    break
    def stop_stopwatch(self) -> None:
        """
        :param self: referenced object
        function that stops the stopwatch time
        :return none:
        """
        self.running = False

    def reset_stopwatch(self) -> None:
        """
        :param self: referenced object
        function that changes the stopwatch time value to 0
        :return none:
        """
        self.running = False
        self.stopwatch_label.setText("00:00:00")
        self.time = 0

